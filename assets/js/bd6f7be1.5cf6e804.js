(self.webpackChunkcrypto_cheatsheet=self.webpackChunkcrypto_cheatsheet||[]).push([[186],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return m},kt:function(){return d}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},m=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,p=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),u=l(n),d=o,k=u["".concat(p,".").concat(d)]||u[d]||c[d]||s;return n?r.createElement(k,a(a({ref:t},m),{},{components:n})):r.createElement(k,a({ref:t},m))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,a=new Array(s);a[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var l=2;l<s;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1375:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return p},metadata:function(){return l},toc:function(){return m},default:function(){return u}});var r=n(2122),o=n(9756),s=(n(7294),n(3905)),a=["components"],i={sidebar_position:2},p="Manage Bundles",l={unversionedId:"common-commands/manage-bundles",id:"common-commands/manage-bundles",isDocsHomePage:!1,title:"Manage Bundles",description:"Export from Bundle",source:"@site/docs/common-commands/manage-bundles.md",sourceDirName:"common-commands",slug:"/common-commands/manage-bundles",permalink:"/crypto-cheatsheet/docs/common-commands/manage-bundles",editUrl:"https://github.com/shawngmc/crypto-cheatsheet/edit/master/website/docs/common-commands/manage-bundles.md",version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Common Commands",permalink:"/crypto-cheatsheet/docs/common-commands/intro"},next:{title:"Convert",permalink:"/crypto-cheatsheet/docs/common-commands/convert"}},m=[{value:"Export from Bundle",id:"export-from-bundle",children:[]}],c={toc:m};function u(e){var t=e.components,n=(0,o.Z)(e,a);return(0,s.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"manage-bundles"},"Manage Bundles"),(0,s.kt)("h2",{id:"export-from-bundle"},"Export from Bundle"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null},"From"),(0,s.kt)("th",{parentName:"tr",align:null},"To"),(0,s.kt)("th",{parentName:"tr",align:null},"Action"),(0,s.kt)("th",{parentName:"tr",align:null},"Command"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"PEM(Nx)"),(0,s.kt)("td",{parentName:"tr",align:null},"PEM(1x)"),(0,s.kt)("td",{parentName:"tr",align:null},"Export via Split"),(0,s.kt)("td",{parentName:"tr",align:null},"Use a text editor and save new files for each BEGIN/END line pair")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"PEM(Nx)"),(0,s.kt)("td",{parentName:"tr",align:null},"PEM(1x)"),(0,s.kt)("td",{parentName:"tr",align:null},"Cert-only csplit"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"td"},"csplit --prefix='cert.' --suffix-format='%03d.pem' multicert.pem '/-----BEGIN CERTIFICATE-----/' '{*}'"))),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"PEM(Nx)"),(0,s.kt)("td",{parentName:"tr",align:null},"PEM(1x)"),(0,s.kt)("td",{parentName:"tr",align:null},"AWK Script"),(0,s.kt)("td",{parentName:"tr",align:null})))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'#!/usr/bin/awk -f\nBEGIN                          { n=0; cert=0; key=0; if ( ARGC < 2 ) { print "Usage: pem-split FILENAME"; exit 1 } }\n/-----BEGIN PRIVATE KEY-----/  { key=1; cert=0 }\n/-----BEGIN CERTIFICATE-----/  { cert=1; key=0 }\nsplit_after == 1               { n++; split_after=0 }\n/-----END CERTIFICATE-----/    { split_after=1 }\n/-----END PRIVATE KEY-----/    { split_after=1 }\nkey == 1                       { print > FILENAME "-" n ".key" }\ncert == 1                      { print > FILENAME "-" n ".crt" }\n``` |\n| PEM(Nx) | DER | Export via Split | PEM -> PEM(1x) -> DER |\n| P12 | PEM(1x) | Export | P12 -> PEM -> PEM(1x) |\n| P12 | DER | Export | ```keytool -export -alias alias -file out.der -keystore store.p12``` |\n| JKS | PEM(1x) | Export | JKS -> P12 -> PEM -> PEM(1x) |\n| JKS | DER | Export | ```keytool -export -alias alias -file\xa0out.der -keystore store.jks``` |\n            \n## Import to Bundle         \n| From          | To             | Action                      | Command |\n|---------------|--------------|-----------------------------|-----------------------------|\n| PEM(1x) | PEM(Nx) | Import via Merge | ```cat 1.pem >> 2.pem``` |\n| PEM(1x) | P12 | Import | ```openssl pkcs12 -export -out certificate.p12 -inkey inkey.pem -in incert.pem -certfile CACert.pem``` |\n| PEM(1x) | JKS | Import | PEM(1x) -> DER -> JKS |\n| DER | PEM(Nx) | Import | DER -> PEM(1x) -> PEM |\n| DER | P12 | Import | DER -> PEM(1x) -> P12 |\n| DER | JKS | Import | ```keytool -import -alias alias -keystore store.jks -file in.der``` |\n            \n## Between Bundles          \n| From          | To             | Action                      | Command |\n|---------------|--------------|-----------------------------|-----------------------------|\n| PEM(Nx) | P12 | Convert | ```openssl pkcs12 -export -out store.p12 -in in.pem``` |\n| PEM(Nx) | P12 | Import to Existing | ```openssl pkcs12 -export -out newstore.p12 -in in.pem``` |\n| PEM(Nx) | P12 | Build a full-chain P12 | ```"cat cacerts.pem cert.pem >> merged.pem\nopenssl pkcs12 -export -inkey key.pem -in merged.pem -name myname -out mergedWithKey.pem"``` |\n| PEM(Nx) | JKS | Convert | PEM -> P12 -> JKS |\n| PEM(Nx) | JKS | Import to Existing | PEM -> P12 -> JKS |\n| P12 | PEM(Nx) | Convert | ```openssl pkcs12 -in in.p12 -out newstore.pem``` |\n| P12 | PEM(Nx) | Import to Existing | ```openssl pkcs12 -in in.p12 >> store.pem``` |\n| P12 | JKS | Convert | ```keytool -importkeystore -srckeystore in.p12 -srcstoretype PKCS12 -destkeystore newstore.jks -deststoretype JKS``` |\n| P12 | JKS | Import All\xa0to Existing | ```keytool -importkeystore -srckeystore in.p12 -srcstoretype PKCS12 -destkeystore store.jks -deststoretype JKS``` |\n| P12 | JKS | Import\xa0One to Existing | ```keytool -importkeystore -srckeystore in.p12 -srcstoretype PKCS12 -srcalias alias\xa0-destkeystore store.jks -deststoretype JKS``` |\n| JKS | P12 | Convert | ```keytool -importkeystore -srckeystore in.jks -srcstoretype JKS -destkeystore newstore.p12 -deststoretype PKCS12``` |\n| JKS | P12 | Import All\xa0to Existing | ```keytool -importkeystore -srckeystore in.jks -srcstoretype JKS -destkeystore store.p12 -deststoretype PKCS12``` |\n| JKS | P12 | Import\xa0One to Existing | ```keytool -importkeystore -srckeystore in.jks -srcstoretype JKS -srcalias alias -destkeystore store.p12 -deststoretype PKCS12``` |\n| JKS | PEM(Nx) | Convert | JKS -> P12 -> PEM |\n| JKS | PEM(Nx) | Import to Existing | JKS ->\xa0P12 -> PEM |\n\n            \n## Create Bundle\n| Inputs                       | Action                      | Command |\n|------------------------------|-----------------------------|-----------------------------|\n| P12 | Generate/Create and Delete | ```keytool -genkey -alias temp -keystore store.p12\nkeytool -delete -alias temp -keystore store.p12``` |            \n| JKS | Generate/Create and Delete | ```keytool -genkey -alias temp -keystore store.jks\nkeytool -delete -alias temp -keystore store.jks``` |            \n| PEM (1x or Nx) | Create | ```touch store.pem``` |         \n\n            \n## List Bundle Contents \n| Inputs                       | Action                      | Command |\n|------------------------------|-----------------------------|-----------------------------|\n| P12 | List with Keytool | ```keytool -list -v -keystore store.p12``` |        \n| P12 | List with OpenSSL | ```openssl pkcs12 -info -in store.p12``` |      \n| JKS | List | ```keytool -list -v -keystore store.jks``` |     \n| PEM(1x) | List Key | ```openssl rsa -in store.pem -check``` |     \n| PEM(1x) | List Cert | ```openssl x509 -in store.pem -text``` |        \n| PEM(Nx) | List Cert Subjects/Issuers | ```openssl crl2pkcs7 -nocrl -certfile CHAINED.pem | openssl pkcs7 -print_certs -noout``` |     \n| PEM(Nx) | List Cert Details | ```openssl crl2pkcs7 -nocrl -certfile CHAINED.pem | openssl pkcs7 -print_certs -text -noout``` |        \n| PEM(Nx) | Split Certs | ```"csplit --prefix=\'cert.\' --suffix-format=\'%03d.pem\' --elide-empty-files multicert.pem \'/-----BEGIN CERTIFICATE-----/\' \'{*}\'\nfind ./cert.*.pem -print0 | xargs -0r -I {} sh -c ""printf {}; openssl x509 -in {} -text"""``` |    \n\n                \n## Delete from\xa0Bundle           \n| Inputs                       | Action                      | Command |\n|------------------------------|-----------------------------|-----------------------------|\n| P12 | Delete | ```keytool -delete -alias temp -keystore store.p12``` |\n| JKS | Delete | ```keytool -delete -alias temp -keystore store.jks``` |\n| PEM(Nx)   | Delete | Use a text editor |\n')))}u.isMDXComponent=!0}}]);